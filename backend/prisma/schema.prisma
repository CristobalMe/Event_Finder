// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model event {
  id          Int      @id @default(autoincrement())
  rating      Float
  location    String
  name        String  @unique
  duration    String
  description String
  image       String
  category    String
  comments    comment[]
  user        user     @relation(fields: [userId], references: [id])
  userId      Int
  date        DateTime
  time        String
  lat         Float
  long        Float
}

model user {
  id                Int      @id @default(autoincrement())
  username          String   @unique
  email             String
  password          String
  attendance        attendance[]
  events            event[]
  lat               Float
  long              Float       
  cellphoneNumber   String?  @unique
}

model comment {
  id          Int      @id @default(autoincrement())
  event       event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  userPosting String
  eventId     Int
  comment     String
}

model attendance {
  id                                    Int      @id @default(autoincrement())
  eventId                               Int
  userAttending                         String
  user                                  user     @relation(fields: [userAttending], references: [username], onDelete: Cascade)
  ridesharingUserPreferencesForEvent    ridesharingUserPreferencesForEvent?
  ridesharingDriver 		                ridesharing?
  ridesharingId                         Int?
}

model ridesharingUserPreferencesForEvent {
  id				              Int           @id @default(autoincrement())
  preferedLocationLat	    Float?
  preferedLocationLong	  Float?
  preferedArrivalTime	    DateTime
  numberOfSeatsNeeded 	  Int
  attendanceId		        Int           @unique
  attendance 			        attendance 	  @relation(fields: [attendanceId], references: [id], onDelete: Cascade)
  ridesharing             ridesharing?  @relation(fields: [ridesharingId], references: [id], onDelete: Cascade)
  ridesharingId           Int?
}

model ridesharing {
  id				                                Int           @id @default(autoincrement())
  userPreferencesIds                        ridesharingUserPreferencesForEvent[]
  seatsAvailable 		                        Int
  departingTime		                          DateTime
  departingLat		                          Float
  departingLong		                          Float
  arrivalTime			                          DateTime
  attendanceId      	                      Int           @unique
  attendance 			                          attendance 	  @relation(fields: [attendanceId], references: [id], onDelete: Cascade)
  eventName                                 String
}